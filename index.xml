<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/</link>
        <description>Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 23 Jan 2021 17:45:55 &#43;0800</lastBuildDate>
            <atom:link href="https://KanShiori.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Go 并发调度总结</title>
    <link>https://KanShiori.github.io/posts/language/golang/go-%E5%B9%B6%E5%8F%91%E8%B0%83%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sat, 23 Jan 2021 17:45:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/language/golang/go-%E5%B9%B6%E5%8F%91%E8%B0%83%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 本文是对 Golang 并发调度实现的一个总结，基本内容来源于网络的]]></description>
</item><item>
    <title>Go 垃圾收集总结</title>
    <link>https://KanShiori.github.io/posts/language/golang/go-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/</link>
    <pubDate>Thu, 14 Jan 2021 20:40:47 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/language/golang/go-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 本文是对 Golang 垃圾收集的一个总结，基本内容来源于网络的学习]]></description>
</item><item>
    <title>Go 内存管理总结</title>
    <link>https://KanShiori.github.io/posts/language/golang/go-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/</link>
    <pubDate>Tue, 05 Jan 2021 18:28:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/language/golang/go-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 本文是对 Golang 内存模型与内存管理的一个总结，基本内容来源于]]></description>
</item><item>
    <title>KVM 虚拟机的存储与网络总结</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/vm/kvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/</link>
    <pubDate>Sat, 28 Nov 2020 17:29:39 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/vm/kvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 本文主要总结一些遇到的虚拟机使用存储与网络的方式，挖了]]></description>
</item><item>
    <title>容器启停原理总结</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/how_docker_work/%E5%AE%B9%E5%99%A8%E5%90%AF%E5%81%9C%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</link>
    <pubDate>Fri, 13 Nov 2020 15:45:03 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/how_docker_work/%E5%AE%B9%E5%99%A8%E5%90%AF%E5%81%9C%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 本文主要描述容器启停背后的步骤，但是不涉及源码。 示例的]]></description>
</item><item>
    <title>容器网络总结</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/how_docker_work/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/</link>
    <pubDate>Fri, 06 Nov 2020 20:40:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/how_docker_work/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 本文是对自己使用过的 docker 使用的网络模式的原理的总结。 1 概]]></description>
</item><item>
    <title>制作虚拟机镜像</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/vm/%E5%88%B6%E4%BD%9C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%95%9C%E5%83%8F/</link>
    <pubDate>Sat, 31 Oct 2020 17:47:42 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/vm/%E5%88%B6%E4%BD%9C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%95%9C%E5%83%8F/</guid>
    <description><![CDATA[中心思想：通过 libvirt 运行一个虚拟机（domain），并保存其对应的 domain 的镜像文件与配置文件，然后就可以在其他机器通过 virsh define + start 或者 virt-install 启动。 说明：下面]]></description>
</item><item>
    <title>PV PVC 与 StorageClass</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/pv-pvc-%E4%B8%8E-storageclass/</link>
    <pubDate>Fri, 30 Oct 2020 16:14:11 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/pv-pvc-%E4%B8%8E-storageclass/</guid>
    <description><![CDATA[1 PV 与 PVC 目的：使用 NFS 做 PV，创建 Pod 使用该 PV Node-1 构建 nfs 服务，位于 &ldquo;/nfs&rdquo; 目录。 创建 PV，使用 nfs 类型。 声明、创建 PVC，使用上述指定的 StorageCl]]></description>
</item><item>
    <title>RBAC 实践</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/rbac-%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Fri, 30 Oct 2020 16:03:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/rbac-%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[Kubernetes 中，通过 RBAC 机制来实现集群 Pod 中对 APIServer 的访问权限控制与授权。 RBAC 机制有三个最基本的概念： Role：一组规则，定义了对 API 对象的操作权限； Subjec]]></description>
</item><item>
    <title>CRD 实践</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/crd-%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Fri, 30 Oct 2020 15:57:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/crd-%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[CRD 是 Kubernetes 可扩展性的第一个体现，因为 Kubernetes 提供的是一个编排的框架，因此不止可以对 Pod 进行编排，也支持通过 CRD 对你自定义的类型的编排。 1 CRD 构建 目的：通过 CRD]]></description>
</item></channel>
</rss>

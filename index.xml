<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/</link>
        <description>Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 06 Feb 2023 20:09:34 &#43;0800</lastBuildDate>
            <atom:link href="https://KanShiori.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>K8s 编程 - Operator Design Notes</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/operator-design-note/</link>
    <pubDate>Mon, 06 Feb 2023 20:09:34 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/operator-design-note/</guid>
    <description><![CDATA[下面简单介绍了各个 Operator 项目的设计框架与思路，作为参考。 Cockroach Operator Cockroach Operator 基于 Controller Runtime 实现的，因此逻辑的入口是 Reconcile() 函数。 大体的逻辑如下： 1 2 3 4 5 6 7 8 9 10 11 12]]></description>
</item>
<item>
    <title>K8s 编程 - Operator Programming Notes</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/operator-programming-note/</link>
    <pubDate>Sun, 05 Feb 2023 20:09:34 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/operator-programming-note/</guid>
    <description><![CDATA[下面是作为 Operator 初学者自己总结的一些经验，纯属个人随意总结，没有任何正确性可言。 使用 Status 传递过程式操作状态 过程式操作指的是 Upgrade Scale 这样的操作，也就是触]]></description>
</item>
<item>
    <title>OpenKruise</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/openkruise/</link>
    <pubDate>Tue, 31 Jan 2023 19:07:30 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/openkruise/</guid>
    <description><![CDATA[1 概述 OpenKruise 通过自定义一些 CRD 来提供一些原生 Resource 不含有的功能。 其基本架构如下： Manager kruise-manager 是各个 CRD 的 Controller 和 Webhook，通过 Deployment 部署。 每个 CRD Controller 逻辑上都是独立的]]></description>
</item>
<item>
    <title>K8s 实现 - Informer 实现</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/informer-implement/</link>
    <pubDate>Mon, 26 Dec 2022 18:57:22 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/informer-implement/</guid>
    <description><![CDATA[1 基本架构 Kubernetes Client-go 库基于 ETCD 的实现了 Push + Pull 的基本模型，其实现的架构如下： 图中上半部分是 Client-go 的实现，包括核心组件： Reflector - Watch 与 List Resource，当 Resource 出现]]></description>
</item>
<item>
    <title>Grafana 基础</title>
    <link>https://KanShiori.github.io/posts/cloud/observability/prometheus-learning/grafana-basic/</link>
    <pubDate>Wed, 30 Nov 2022 19:37:21 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/observability/prometheus-learning/grafana-basic/</guid>
    <description><![CDATA[1 基本概念 1.1 Data Source Grafana 支持多种不同类型的时序数据库，称为<strong><ruby>数据源<rt>Data Source</rt></ruby></strong>。目前官方支持：Graphite、InfluxDB、]]></description>
</item>
<item>
    <title>Prometheus Operator</title>
    <link>https://KanShiori.github.io/posts/cloud/observability/prometheus-learning/prometheus-operator/</link>
    <pubDate>Wed, 30 Nov 2022 03:50:43 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/observability/prometheus-learning/prometheus-operator/</guid>
    <description><![CDATA[Prometheus Operator 提供了 Kubernetes 上原生部署 Prometheus 以及其他监控组件的能力。 1 基本模型 为了方便的管理 Prometheus 以及监控，Prometheus Operator 提供了一下的 CR： Prometheus - 用于部署 Prometheus Alertmanager]]></description>
</item>
<item>
    <title>Prometheus Alert</title>
    <link>https://KanShiori.github.io/posts/cloud/observability/prometheus-learning/alert/</link>
    <pubDate>Tue, 22 Nov 2022 21:56:17 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/observability/prometheus-learning/alert/</guid>
    <description><![CDATA[1 基本概念 Prometheus 生态中的告警，有 Prometheus Server 和 Alertmanager 组件实现。 Prometheus Server 负责采集 Metrics，并根据 Prometheus Rule 配置的 PromQL 决定是否触发 Alert。 Alertmanager 负责接收 Server 的 Alert 信息，然]]></description>
</item>
<item>
    <title>GCP - IAM</title>
    <link>https://KanShiori.github.io/posts/cloud/gcp_learning/iam/</link>
    <pubDate>Mon, 07 Nov 2022 20:20:30 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/gcp_learning/iam/</guid>
    <description><![CDATA[1 基本模型 通过 IAM 控制 “谁” 对哪些资源有着哪种访问权限。 IAM 本质上是为了完成两个功能： Authentication - 身份认证，操作资源前确认请求者是 “谁”； Authorization - 授权，操作]]></description>
</item>
<item>
    <title>跨云访问资源</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/access-resources-across-clouds/</link>
    <pubDate>Tue, 25 Oct 2022 13:54:10 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/access-resources-across-clouds/</guid>
    <description><![CDATA[跨云访问指的是：在一个云厂商的环境中，访问另一个云厂商的服务。最简单的方式就是将静态密钥（AWS AK/SK 与 GCP ServiceAccount Key）注入到应用中，但是显而易见这]]></description>
</item>
<item>
    <title>K8s 实现 - Scheduler 实现</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/scheduler-implement/</link>
    <pubDate>Mon, 19 Sep 2022 15:21:22 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/scheduler-implement/</guid>
    <description><![CDATA[1 概述 Kubernetes Scheduler 负责了 Schedule + Eviction + Preemption 三个功能。Scheduler 本质上也是一个 Controller，监听着 Pod 和 Node 等资源，出现事件时尝试执行调度操作。 目]]></description>
</item>
</channel>
</rss>

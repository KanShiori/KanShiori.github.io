<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/</link>
        <description>Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 03 Jul 2021 05:47:25 &#43;0000</lastBuildDate>
            <atom:link href="https://KanShiori.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>K8s 学习 - API Server 认证</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/api-server-%E8%AE%A4%E8%AF%81/</link>
    <pubDate>Sat, 03 Jul 2021 05:47:25 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/api-server-%E8%AE%A4%E8%AF%81/</guid>
    <description><![CDATA[1 概述 Kubernetes 中所有的资源访问与操作都是通过 API Server 执行的，因此 API Server 有着一套安全机制。 APIServer 的权限检查从大体上分为三个阶段： Authentication ：身份认证，用于验证请求者的]]></description>
</item><item>
    <title>Ginkgo 学习</title>
    <link>https://KanShiori.github.io/posts/language/golang/ginkgo-%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Sun, 27 Jun 2021 07:26:25 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/language/golang/ginkgo-%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[1 概述 ginkgo 是一个 BDD 框架，Kubernetes 的 E2E 测试使用该框架实现集群的测试。 ginkgo 是集成在 Go 测试框架的，在目录下执行 ginkgo bootstrap 就会构建测试的入口： 1 2]]></description>
</item><item>
    <title>[WIP] AWS 学习 - VPC</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/aws_learning/vpc/</link>
    <pubDate>Wed, 23 Jun 2021 14:13:47 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/aws_learning/vpc/</guid>
    <description><![CDATA[1 VPC 与 Subnet 首先，云上的网络是由 <strong><ruby>VPC<rt>Virtual Private Cloud</rt></ruby></strong> 为基础的，VPC 是针对 Region 而言的。 VPC 需要通过 CIDR 块来指定其的地址范围，相当于给局域网指定的网段。 然而，VPC 仅]]></description>
</item><item>
    <title>K8s 学习 - Schedule Preemption Eviction</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/schedule-preemption-eviction/</link>
    <pubDate>Wed, 23 Jun 2021 12:09:25 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/schedule-preemption-eviction/</guid>
    <description><![CDATA[1 概述 无论是基本的副本控制器，还是自定义资源，其控制的底层 Pod 的调度都是都通过 Scheduler 完成的。 2 Schedule 2.1 nodeSelector Pod 的 spec.nodeSelector 可以用于控制 Pod 能被调度到哪些节点上。其内]]></description>
</item><item>
    <title>[WIP] TiDB Operator 学习 - ControllerManager 概述</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/tidb-operator-learning/controller-manager-%E6%A6%82%E8%BF%B0/</link>
    <pubDate>Sat, 19 Jun 2021 15:09:23 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/tidb-operator-learning/controller-manager-%E6%A6%82%E8%BF%B0/</guid>
    <description><![CDATA[1 概述 TiDB Operator 中的 ControllerManager 用于管理 TiDBCluster 这个 CustomResource。 下面 ControllerManager 都是指的 TiDB Operator 的 ControllerManager。 TiDBCluster 是一个抽象的概念，其稳]]></description>
</item><item>
    <title>K8s 学习 - API</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/api/</link>
    <pubDate>Sat, 12 Jun 2021 07:32:36 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/api/</guid>
    <description><![CDATA[1 概述 1.1 组织对象的方式 Kubernetes 中，组织对象的方式，就是按照 Group、Version、Resource 三个层级。 Group 用以来对 API 进行分组（分类）； Version 用]]></description>
</item><item>
    <title>K8s 学习 - CRD</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/crd/</link>
    <pubDate>Thu, 10 Jun 2021 11:45:54 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/crd/</guid>
    <description><![CDATA[1 概述 Kubernetes 不仅仅是一个编排框架，更是提供了极大的扩展性，可以看做一个资源框架。你可以基于 k8s 提供的种种功能，来满足你应用的需要。 其中 CRD 就是允许你]]></description>
</item><item>
    <title>K8s 学习 - StatefulSet</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/statefulset/</link>
    <pubDate>Wed, 09 Jun 2021 11:55:46 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/statefulset/</guid>
    <description><![CDATA[1 概述 Pod 在设计的理念上是无状态的，Pod 可以在任意时刻被销毁，可以在任意时刻被在别的节点创建相同的副本。 Deployment 与 RelicSets 就是基于这个理念设计的，它们仅]]></description>
</item><item>
    <title>K8s 学习 - RBAC 授权机制</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/rbac/</link>
    <pubDate>Tue, 08 Jun 2021 12:05:39 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/rbac/</guid>
    <description><![CDATA[1 概念 在 API 访问控制 中提到，Kubernetes 支持的授权机制有多种，其中 RBAC 是最常用的授权方式。RBAC 基于角色访问控制，全称 Role-Base Access Contro]]></description>
</item><item>
    <title>K8s 学习 - PV PVC StorageClass</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/pv-pvc-storageclass/</link>
    <pubDate>Tue, 08 Jun 2021 07:43:09 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/pv-pvc-storageclass/</guid>
    <description><![CDATA[1 PV <strong><ruby>PV<rt>Persistent Volume</rt></ruby></strong> 代表一个实际可用的后端存储（也可能不是后端，而是 Local PV）。大多数情况下，PV 是一个网络文件系统，或者分布式存储，或者云厂商的云盘。 1.1]]></description>
</item></channel>
</rss>

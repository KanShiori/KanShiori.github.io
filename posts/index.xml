<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/posts/</link>
        <description>所有文章 | Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 13 Nov 2020 15:45:03 &#43;0800</lastBuildDate><atom:link href="https://KanShiori.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>容器启停原理总结</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/how_docker_work/%E5%AE%B9%E5%99%A8%E5%90%AF%E5%81%9C%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</link>
    <pubDate>Fri, 13 Nov 2020 15:45:03 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/how_docker_work/%E5%AE%B9%E5%99%A8%E5%90%AF%E5%81%9C%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[目的：描述容器启停背后的步骤，但是不涉及源码。 示例的基于 ubuntu 20.04.1 LTS 虚拟机运行，docker 版本如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22]]></description>
</item><item>
    <title>容器网络总结</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/how_docker_work/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/</link>
    <pubDate>Fri, 06 Nov 2020 20:40:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/how_docker_work/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[1 概览 docker 容器网络目前包含 5 中模式，包括： bridge：默认的网络模式，使用 bridge 虚拟网卡 + iptables 实现一个内地内网，所有容器都处于该内网内，并且可以相]]></description>
</item><item>
    <title>制作虚拟机镜像</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/vm/%E5%88%B6%E4%BD%9C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%95%9C%E5%83%8F/</link>
    <pubDate>Sat, 31 Oct 2020 17:47:42 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/vm/%E5%88%B6%E4%BD%9C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%95%9C%E5%83%8F/</guid>
    <description><![CDATA[中心思想：通过 libvirt 运行一个虚拟机（domain），并保存其对应的 domain 的镜像文件与配置文件，然后就可以在其他机器通过 virsh define + start 或者 virt-install 启动。 说明：下面]]></description>
</item><item>
    <title>PV PVC 与 StorageClass</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/pv-pvc-%E4%B8%8E-storageclass/</link>
    <pubDate>Fri, 30 Oct 2020 16:14:11 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/pv-pvc-%E4%B8%8E-storageclass/</guid>
    <description><![CDATA[1 PV 与 PVC 目的：使用 NFS 做 PV，创建 Pod 使用该 PV Node-1 构建 nfs 服务，位于 &ldquo;/nfs&rdquo; 目录。 创建 PV，使用 nfs 类型。 声明、创建 PVC，使用上述指定的 StorageCl]]></description>
</item><item>
    <title>RBAC 实践</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/rbac-%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Fri, 30 Oct 2020 16:03:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/rbac-%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[Kubernetes 中，通过 RBAC 机制来实现集群 Pod 中对 APIServer 的访问权限控制与授权。 RBAC 机制有三个最基本的概念： Role：一组规则，定义了对 API 对象的操作权限； Subjec]]></description>
</item><item>
    <title>CRD 实践</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/crd-%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Fri, 30 Oct 2020 15:57:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/crd-%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[CRD 是 Kubernetes 可扩展性的第一个体现，因为 Kubernetes 提供的是一个编排的框架，因此不止可以对 Pod 进行编排，也支持通过 CRD 对你自定义的类型的编排。 1 CRD 构建 目的：通过 CRD]]></description>
</item><item>
    <title>Job CronJob 实践</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/job-cronjob-%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Fri, 30 Oct 2020 15:33:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/job-cronjob-%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[Job 用于运行一次性的任务，即“离线任务”。CronJob 在 Job 之上提供了周期性任务支持。 1 Job 目的：部署 Job 任务，使用并行运行（Batch）的功能。]]></description>
</item><item>
    <title>DaemonSet 实践</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/daemonset-%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Fri, 30 Oct 2020 15:26:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/daemonset-%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[DaemonSet 会为匹配的 Node 运行一个 Daemon Pod，与 Deployment 类最大不同，DaemonSet 没有副本的概念。 目的：部署 DaemonSet，试用 toleration 与 nodeAffini]]></description>
</item><item>
    <title>StatefulSet 实践</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/statefulset-%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Fri, 30 Oct 2020 09:32:39 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/statefulset-%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[Deployment 对于“无状态”的任务，已经能够做到副本控制，滚动升级功能了。但是 Deployment 无法适用于“有状态”的任务，因为其中 Pod 都是相同的，没有任何的对应关系。 而]]></description>
</item><item>
    <title>Deployment 实践</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/deployment-%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Fri, 16 Oct 2020 16:08:05 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_practice/deployment-%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[1 ReplicaSet Deploment 管理的是 ReplicaSet，所以先运行 ReplicaSet 观察。 ReplicaSet 只包含副本控制功能，没有滚动升级等高级的功能。 1.1 部署 ReplicaSet 创建 manifest 文件。 调用 kubectl create 创建资源。]]></description>
</item></channel>
</rss>

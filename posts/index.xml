<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/posts/</link>
        <description>所有文章 | Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 25 Oct 2022 13:54:10 &#43;0800</lastBuildDate><atom:link href="https://KanShiori.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>跨云访问资源</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/access-resources-across-clouds/</link>
    <pubDate>Tue, 25 Oct 2022 13:54:10 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/access-resources-across-clouds/</guid>
    <description><![CDATA[跨云访问指的是：在一个云厂商的环境中，访问另一个云厂商的服务。最简单的方式就是将静态密钥（AWS AK/SK 与 GCP ServiceAccount Key）注入到应用中，但是显而易见这]]></description>
</item>
<item>
    <title>Thinking in Operator</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/thinking-in-opeator/</link>
    <pubDate>Tue, 13 Sep 2022 20:09:34 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/thinking-in-opeator/</guid>
    <description><![CDATA[下面是作为 Operator 初学者自己总结的一些经验，纯属个人随意总结，没有任何正确性可言。 如何使用 Status 传递过程式操作状态 过程式操作指的是 Upgrade Scale 这样的操作，也就]]></description>
</item>
<item>
    <title>Kubernetes - 网络设计</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/container-network/</link>
    <pubDate>Wed, 31 Aug 2022 20:22:14 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/container-network/</guid>
    <description><![CDATA[1 网络模型 Kubernetes 集群中的网络是虚拟扁平的大网络，Service 与 Pod 的网络有着各自独立的一个网段，每个 Service 与 Pod 占用网段中的一个 IP。Pod 之间可以通]]></description>
</item>
<item>
    <title>使用 KubeBuilder 编写 Controller</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/kubebuilder/</link>
    <pubDate>Mon, 08 Aug 2022 21:16:40 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/kubebuilder/</guid>
    <description><![CDATA[1 基本框架 执行 kubebuilder init 命令后，KubeBuilder 就会创建 Controller 的基本框架。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35]]></description>
</item>
<item>
    <title>AWS - Private Link</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/private-link/</link>
    <pubDate>Mon, 11 Jul 2022 20:03:39 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/private-link/</guid>
    <description><![CDATA[1 概述 在 AWS - VPC 与 Service 通信 中，描述了 VPC 与 Service 通信的几种方式： VPC Peering - 连接两个不同网段的 VPC Transit Gateway - 连接多个不同网段的 VPC Private Link - 通过 Endpoint 来作为 Service 的代理 每种方式]]></description>
</item>
<item>
    <title>Certificate 总结</title>
    <link>https://KanShiori.github.io/posts/net/certificate/</link>
    <pubDate>Mon, 13 Jun 2022 21:29:19 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/net/certificate/</guid>
    <description><![CDATA[1 基本原理 签发证书本质上是：使用 CA 的私钥给申请的公钥进行签名 从签发证书的角度看，设计到两个对象： CA - 签发证书的机构 root cert - CA 证书（包含 CA 公钥）]]></description>
</item>
<item>
    <title>Kubernetes - 证书相关</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/certificate/</link>
    <pubDate>Mon, 13 Jun 2022 21:01:06 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/certificate/</guid>
    <description><![CDATA[1 Kubernetes 中的证书 Kubernetes 所有组件之间的通信都基于 TLS 进行加密，并且都基于 mTLS 进行双向认证。因此，每个组件作为调用者需要配置：client cert + client key + server ca ce]]></description>
</item>
<item>
    <title>AWS - EBS</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/ebs/</link>
    <pubDate>Wed, 25 May 2022 21:43:54 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/ebs/</guid>
    <description><![CDATA[1 概述 AWS Elastic Block Store（简称 EBS） 是 AWS 中的主要存储服务，EBS Volume 可以附加到某个 EC2 Instance 上，在 Instance 上看就是一个未经过格式化的块设备，与其他物理硬盘]]></description>
</item>
<item>
    <title>Kustomize</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/kustomize/</link>
    <pubDate>Mon, 23 May 2022 21:30:43 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/kustomize/</guid>
    <description><![CDATA[1 概述 Kustomize 基于 kustomization.yaml 文件来生成一系列的 Kubernetes 资源的 YAML 文件。 基于这种模式，Kustomize 能够支持的功能大致分为三类： 生成 Resource - 基于一些来源数据，生成出]]></description>
</item>
<item>
    <title>Kubernetes - Update 与 Rollback</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/rolling-upgrade/</link>
    <pubDate>Wed, 11 May 2022 21:24:25 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/rolling-upgrade/</guid>
    <description><![CDATA[1 操作 1.1 Update 当用户修改 Deployment DaemonSet StatefulSet 定义中的 .spec.template 任意字段时，就会触发 Pod 的升级，默认都是 Rolling Update。 1 $ kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1 通过 kubectl rollout status 查看滚动升级的过程： 1 2 3]]></description>
</item>
</channel>
</rss>

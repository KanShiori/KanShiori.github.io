<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/posts/</link>
        <description>所有文章 | Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 08 Jun 2021 12:09:25 &#43;0000</lastBuildDate><atom:link href="https://KanShiori.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Schedule Preemption Eviction</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/schedule-preemption-eviction/</link>
    <pubDate>Tue, 08 Jun 2021 12:09:25 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/schedule-preemption-eviction/</guid>
    <description><![CDATA[1 概述 无论是基本的副本控制器，还是自定义资源，其控制的底层 Pod 的调度都是都通过 scheduer 完成的。 2 调度 2.1 nodeSelector Pod 的 spec.nodeSelector 可以用于控制 Pod 能被调度到哪些节点上。其]]></description>
</item><item>
    <title>[WIP] CRD 学习</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/crd-%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Tue, 08 Jun 2021 11:45:54 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/crd-%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[1 概述 Kubernetes 不仅仅是一个编排框架，更是提供了极大的扩展性，可以看做一个资源框架。你可以基于 k8s 提供的种种功能，来满足你应用的需要。 其中 CRD 就是允许你]]></description>
</item><item>
    <title>StatefulSet 学习</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/statefulset-%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Mon, 07 Jun 2021 11:55:46 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/statefulset-%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[1 StatefulSet 概述 Pod 在设计的理念上是无状态的，因为 Pod 可以被认为任意时刻被销毁，或者任意时刻可以被在别的节点创建。 Deployment 与 RelicSets 就是基于这个理念设计的，它们仅仅]]></description>
</item><item>
    <title>Service 学习</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/service-%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Sun, 06 Jun 2021 14:03:01 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/service-%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[1 概述 首先我们需要明确 Service 出现的背景：因为 Pod 设计上是无状态的，可以说没有固定的 IP，所以在其他组件访问某一个网络服务时，需要一个 “固定” 的地址]]></description>
</item><item>
    <title>PV PVC StorageClass 学习</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/pv-pvc-storageclass-%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Sat, 05 Jun 2021 07:43:09 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/pv-pvc-storageclass-%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[1 概念 1.1 PV <strong><ruby>PV<rt>Persistent Volume</rt></ruby></strong> 代表一个实际可用的后端存储（也可能不是后端，而是 Local PV）。大多数情况下，PV 是一个网络文件系统，或者分布式存储，或者云厂商的云]]></description>
</item><item>
    <title>SSL/TLS 总结</title>
    <link>https://KanShiori.github.io/posts/net/tls-%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sat, 01 May 2021 15:09:13 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/net/tls-%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 之前一直对 TLS 与证书理解的不清晰，这里尝试进行总结一下。]]></description>
</item><item>
    <title>Linux 存储架构 - VFS 总结</title>
    <link>https://KanShiori.github.io/posts/linux/storage/linux-%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84-vfs%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sat, 13 Mar 2021 06:29:25 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/linux/storage/linux-%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84-vfs%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 本文是对 Linux 存储架构中的 VFS 层的一个总结，基本内容来源于网]]></description>
</item><item>
    <title>Go 调试方法总结</title>
    <link>https://KanShiori.github.io/posts/language/golang/go-%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</link>
    <pubDate>Thu, 18 Feb 2021 17:54:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/language/golang/go-%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 本文是对 Golang 调试方法的一个总结，基本内容来源于网络的学习]]></description>
</item><item>
    <title>Linux 网络收发包过程总结</title>
    <link>https://KanShiori.github.io/posts/linux/net/linux-%E7%BD%91%E7%BB%9C%E6%94%B6%E5%8F%91%E5%8C%85%E8%BF%87%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
    <pubDate>Thu, 04 Feb 2021 16:29:04 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/linux/net/linux-%E7%BD%91%E7%BB%9C%E6%94%B6%E5%8F%91%E5%8C%85%E8%BF%87%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 本文是对 Linux 网络收发包一个总结，基本内容来源于网络的学习]]></description>
</item><item>
    <title>Go 并发调度总结</title>
    <link>https://KanShiori.github.io/posts/language/golang/go-%E5%B9%B6%E5%8F%91%E8%B0%83%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sat, 23 Jan 2021 17:45:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/language/golang/go-%E5%B9%B6%E5%8F%91%E8%B0%83%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结系列的文章是自己的学习或使用后，对相关知识的一个总结，用于后续可以快速复习与回顾。 本文是对 Golang 并发调度实现的一个总结，基本内容来源于网络的]]></description>
</item></channel>
</rss>

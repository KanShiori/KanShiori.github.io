[
    {
        "title": "关于",
        "uri": "about",
        "content": "Hugo              LoveIt  Logo   gopherize me         realfavicongenerator net",
        "objectID": "about",
        "date": "2020-10-15T12:10:35.000Z",
        "draft": false,
        "lightgallery": true,
        "math": {
            "enable": true
        }
    },
    {
        "title": "容器启停原理总结",
        "uri": "posts/cloud_computing/how_docker_work/容器启停原理总结",
        "content": "ubuntu 20 04 1 LTS       docker         docker version Client  Version  19 03 8 API version  1 40 Go version  go1 13 8 Git commit  afacb8b7f0 Built  Wed Oct 14 19 43 43 2020 OS Arch  linux amd64 Experimental  false Server  Engine  Version  19 03 8 API version  1 40  minimum version 1 12  Go version  go1 13 8 Git commit  afacb8b7f0 Built  Wed Oct 14 16 41 21 2020 OS Arch  linux amd64 Experimental  false containerd  Version  1 3 3 0ubuntu2 GitCommit  runc  Version  spec  1 0 1 dev GitCommit  docker init  Version  0 18 0 GitCommit  1    1 1 Create    docker create                                    create                                 RWLayer                          1                                              2                                  rootfs                   docker                root                                 init                                     etc resolve conf  etc hosts          init                                                                   hostname nameserver    docker           docker                     init                                        docker save       etresolve conf                    init                                   COW                                 storagedriver                   init               union mount                           docker create   rm  t ubuntu 361c520da78f848d639d65f042fcf5d448c13cbc4ce8c251dcba2250162b48fe inspect                  docker inspect 361c520da78f    GraphDriver      Data      LowerDir     var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c init diff  var lib docker overlay2 0336c489d40e65588748265a95f18328ddb1f5bcb9ebf10909fbf3f5f35b9496 diff  var lib docker overlay2 77d3ac91877751678bfec0576dab39ccd4b73666f8040aef387ef47ff30b4cf1 diff  var lib docker overlay2 ec8326178c990b52970a65371fd375737fdf256db597aa821a2b0f7d79bcc6f3 diff  var lib docker overlay2 385038374d3d369e98724926d0e1c240dcb74e31b1663ec1cb434c43ca2826f1 diff    MergedDir     var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c merged    UpperDir     var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c diff    WorkDir     var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c work      Name    overlay2         ls  var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c  diff link lower work                   var lib docker  driver            driver                          driver    overlay2       diff work                    diff               var lib docker overlay2                          xxx init         init         diff                 ls  var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c init committed diff link lower work   tree  var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c init diff  var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c init diff     dev       console       pts       shm     etc     hostname     hosts     mtab     proc mounts     resolv conf                    mount                      3            docker create      docker ps  a              inspect                create                          var lib docker containers                     ID    cd  var lib docker containers    ls 361c520da78f848d639d65f042fcf5d448c13cbc4ce8c251dcba2250162b48fe   ls 361c520da78f848d639d65f042fcf5d448c13cbc4ce8c251dcba2250162b48fe checkpoints config v2 json hostconfig json config v2 json                        var lib docker containers                                       docker daemon                 docker daemon                                docker daemon                  container        1 2 Start    docker start                            Create   Stop          Start       rootfs              init        union mount             containerd          docker run     docker create   docker run             2  rootfs     rootfs                           init           union mount            union mount                                                                                                                     docker start 361c520da78f 361c520da78f    mount              union mount         mount   overlay  var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c merged type overlay  rw relatime lowerdir  var lib docker overlay2 l O2TO66S3K4MTADSAAX6VXGTWSJ  var lib docker overlay2 l UHTTQ5AJKPR23Y3V7J4ZLOIFDR  var lib docker overlay2 l VWIFLRAQOPMH7LBAQQ5DDGIYVM  var lib docker overlay2 l LQBRTVETGGWVU2OHWC42443K7X  var lib docker overlay2 l 5PDNI5HSOH6UMUDNWF4VMR46TS upperdir  var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c diff workdir  var lib docker overlay2 d063d1d9c81d0c72d7384ea999dbd77b33d04b942ef94a5aabc6fb6cf984194c work xino off  nsfs  run docker netns 4500ea4f0025 type nsfs  rw    ls  lh  var lib docker overlay2 l O2TO66S3K4MTADSAAX6VXGTWSJ lrwxrwxrwx 1 root root 77 Nov 14 15 51 ",
        "objectID": "posts/cloud_computing/how_docker_work/容器启停原理总结",
        "date": "2020-11-13T07:45:03.000Z",
        "description": "容器启动背后的执行过程",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "docker",
            "container"
        ],
        "categories": [
            "Docker 原理总结"
        ]
    },
    {
        "title": "容器网络总结",
        "uri": "posts/cloud_computing/how_docker_work/容器网络总结",
        "content": "1    docker          5         bridge            bridge        iptables                                host           net namespace            overlay     docker daemon      overlay         docker daemon              macvlan    macvlan                                           none                    driver                                          net namespace   docker                                          ubuntu 20 04     5 4 0 52 generic     docker        docker version Client  Version  19 03 8 API version  1 40 Go version  go1 13 8 Git commit  afacb8b7f0 Built  Wed Oct 14 19 43 43 2020 OS Arch  linux amd64 Experimental  false Server  Engine  Version  19 03 8 API version  1 40  minimum version 1 12  Go version  go1 13 8 Git commit  afacb8b7f0 Built  Wed Oct 14 16 41 21 2020 OS Arch  linux amd64 Experimental  false containerd  Version  1 3 3 0ubuntu2 GitCommit  runc  Version  spec  1 0 1 dev GitCommit  docker init  Version  0 18 0 GitCommit  2      2 1 cgroup   namespace                       2 2 docker      net namespace namespace                       host   container               net namespace        net namespace              iptables net_filter           net namespace                                     namespace                   docker           net namespace                           namespace                      namespace           mount                                       mount   nsfs  run docker netns 9779108cb6b0 type nsfs  rw          net namespace               netns inode      inode         docker top br0_container UID PID PPID C STIME TTY TIME CMD root 92658 92640 0 Nov06 pts 0 00 00 00  bin bash   ls  lhi  proc 92658 ns net 474863 lrwxrwxrwx 1 root root 0 Nov 7 12 42  proc 92658 ns net     net  4026532287      inode     net    inode      ls  lhi  run docker netns 9779108cb6b0 4026532287  r  r  r   1 root root 0 Nov 6 19 47  run docker netns 9779108cb6b0            net namespace                          namespace                      2 3 bridge        bridge                               bridge               bridge                                     brdige         IP   bridge    IP                                 IP           net_filter          bridge        Linux       bridge         2 4 veth pair        veth pair                     veth           veth     veth pair             net namespace          net namespace            veth                  veth       bridge               bridge          veth pair          Linux       veth      2 5 macvlan        macvlan          mac     ip        net namespace                               macvlan                bridge private          macvlan               macvlan          Linux interfaces virtual networking 3 Bridge    3 1       Bridge     1                   bridge       docker              docker network create   driver bridge     subnet 192 168 100 0 24     ip range 192 168 100 0 26     gateway 192 168 100 1     opt com docker network bridge name mybr0   mybridge0 2e61a7dc333c1bc61d9cb86503ce4cd5a7435977ea2f9b7cc97fc71ae0e2bb93   driver bridge         driver    subnet 192 168 100 0 24      bridge          ip range 192 168 100 0 26            ip                       gateway 192 168 100 1          IP    opt com docker network bridge name mybr0        bridge        mybridge0      docker network         ifconfig      bridge             bridge                      IP       gateway IP    ifconfig   mybr0  flags 4099 mtu 1500 inet 192 168 100 1 netmask 255 255 255 0 broadcast 192 168 100 255 ether 02 42 46 8a cf 34 txqueuelen 0  Ethernet  RX packets 0 bytes 0  0 0 B  RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0  0 0 B  TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0     brctl show bridge name bridge id STP enabled interfaces mybr0 8000 0242efdb0984 no            bridge        bridge                                                                         iptables    NAT                                 iptables         nat   filter          nat                          iptables  t nat  L  nv Chain PREROUTING  policy ACCEPT 2 packets  88 bytes  target prot opt source destination DOCKER        0 0 0 0 0 0 0 0 0 0 ADDRTYPE match dst type LOCAL Chain INPUT  policy ACCEPT 2 packets  88 bytes  target prot opt source destination Chain OUTPUT  policy ACCEPT 124 packets  8797 bytes  target prot opt source destination DOCKER        0 0 0 0 0  127 0 0 0 8 ADDRTYPE match dst type LOCAL Chain POSTROUTING  policy ACCEPT 124 packets  8797 bytes  target prot opt source destination MASQUERADE       mybr0 192 168 100 0 24 0 0 0 0 0 Chain DOCKER  2 references  target prot opt source destination RETURN    mybr0   0 0 0 0 0 0 0 0 0 0 PREROUTING   OUTPUT                    DOCKER    POSTROUTING      mybridge0    192 168 100 0 24     ip    MASQUERADE                 ip          ip              mybr0        mybridge0               MASQUERADE     mybr0              mybr0               filter                in mybr0      filter         iptables  t filter  L  nv Chain INPUT  policy ACCEPT 61774 packets  79M bytes  Chain FORWARD  policy ACCEPT 0 packets  0 bytes",
        "objectID": "posts/cloud_computing/how_docker_work/容器网络总结",
        "date": "2020-11-06T12:40:51.000Z",
        "description": "描述 docker 下容器网络模型与实现",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "docker",
            "container"
        ],
        "categories": [
            "Docker 原理总结"
        ]
    },
    {
        "title": "CRD 实践",
        "uri": "posts/cloud_computing/k8s_practice/crd-实践",
        "content": "CRD   Kubernetes               Kubernetes                     Pod            CRD              1 CRD          CRD               CRD manifest                       CRD                CR                           kubectl apply    CR    CRD      Kubernetes                       kubectl apply                    Kubernetes                      CRNetwork                               CR                     kubectl   Client       Controller             CR                             k8s_practice    k8s                        2             Kubernetes         API                                                    main                                  k8s_practice Controller              Informer     Event    CR Sync     Controller           Informer     APIServer     CR     Cache      CR Event    Event Handler  Event Handler Informer     Event                workQueue       Workers      Event                             main                Informer Controller    Controller            Controller                 CR                          HandleAdd                       CR       Controller         Sync              CR    example crnetwork 2    Controller            Controller                   example crnetwork 2    Controller            Controller                  3             Pod TODO",
        "objectID": "posts/cloud_computing/k8s_practice/crd-实践",
        "date": "2020-10-30T07:57:36.000Z",
        "description": "使用 CRD 自定义资源，通过 Kubernetes 编排",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "k8s",
            "云计算"
        ],
        "categories": [
            "k8s 实践"
        ]
    },
    {
        "title": "DaemonSet 实践",
        "uri": "posts/cloud_computing/k8s_practice/daemonset-实践",
        "content": "DaemonSet       Node      Daemon Pod   Deployment       DaemonSet                DaemonSet    toleration   nodeAffinity              DaemonSet       nodeAffinity              toleration    Node   taint                        node 1 node 2         Affinity             DaemonSet                           kubectl rollout status              Deployment               Event          delete    create",
        "objectID": "posts/cloud_computing/k8s_practice/daemonset-实践",
        "date": "2020-10-30T07:26:30.000Z",
        "description": "使用 DaemonSet 部署常驻容器",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "k8s",
            "云计算"
        ],
        "categories": [
            "k8s 实践"
        ]
    },
    {
        "title": "Deployment 实践",
        "uri": "posts/cloud_computing/k8s_practice/deployment-实践",
        "content": "1 ReplicaSet Deploment      ReplicaSet       ReplicaSet     ReplicaSet                         1 1    ReplicaSet    manifest             kubectl create                     ReplicaSet            Pod             1 2         3   Pod       Node 3            Node 3       node 3    NotReady                    Pod    Terminating        Pod                       3   Pod       Node 2            Node 3    kubelet                    Pod Pod       Terminating             1 3         kubectl scale                      Pod   Node 3              kubectl scale                Pod                     ReplicaSet            Scheduler                   Pod          Pod                       2 Deployment Deployment         ReplicaSet     Pod  2 1       manfiest             kubectl create    Deployment            Event         ReplicaSet          Deployment     ReplicaSet         2 2      Deployment         ReplicaSet           ReplicaSet   replica           2 3       1       Deployment   ReplicaSet                       Deployment            3          Deployment         image                 Deployment       ReplicaSet        Pod      ReplicaSet       0          Deployment   Event         ReplicaSet               ReplicaSet                 Pod                 3        2                   Deployment              kubectl set image   Deployment                         Event                  Replicaset                                                       Pod       2 4                      Deployment                     kubectl rollout    Deployment         kubectl rollout history      Deployment              record     kubectl                                          revision                       kubectl rollout undo                       to revision                                   history                       4",
        "objectID": "posts/cloud_computing/k8s_practice/deployment-实践",
        "date": "2020-10-16T08:08:05.000Z",
        "description": "使用 Deployment 进行部署",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "k8s",
            "云计算"
        ],
        "categories": [
            "k8s 实践"
        ]
    },
    {
        "title": "Job CronJob 实践",
        "uri": "posts/cloud_computing/k8s_practice/job-cronjob-实践",
        "content": "Job                    CronJob   Job               1 Job       Job           Batch           Job                     Pod                            deadline   100    pod         restartPolicy                    deadline                 4             2 CronJob       CronJob             CronJob     Job             CronJob       CronJob       JobTemplate    CronJob       Job                   CronJob       Job               Job",
        "objectID": "posts/cloud_computing/k8s_practice/job-cronjob-实践",
        "date": "2020-10-30T07:33:36.000Z",
        "description": "使用 Job 或者 CronJob 部署一次性任务",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "k8s",
            "云计算"
        ],
        "categories": [
            "k8s 实践"
        ]
    },
    {
        "title": "PV PVC 与 StorageClass",
        "uri": "posts/cloud_computing/k8s_practice/pv-pvc-与-storageclass",
        "content": "1 PV   PVC       NFS   PV    Pod     PV Node 1    nfs         nfs         PV    nfs                     PVC         StorageClass                      pvc     Bound            pvc    pv      pv               PV        PV          Pod Deployment   Pod   Volume    PVC                 Pod        Node 2 Node 3   Node 2 Node 3          nfs mount                                Node 3                                nfs",
        "objectID": "posts/cloud_computing/k8s_practice/pv-pvc-与-storageclass",
        "date": "2020-10-30T08:14:11.000Z",
        "description": "使用 PV 与 PVC 为 Pod 提供存储",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "k8s",
            "云计算"
        ],
        "categories": [
            "k8s 实践"
        ]
    },
    {
        "title": "RBAC 实践",
        "uri": "posts/cloud_computing/k8s_practice/rbac-实践",
        "content": "Kubernetes      RBAC         Pod    APIServer             RBAC              Role           API          Subject                 ServiceAccount  RoleBinding    Role   Subject  1 Role   ServiceAccount          Role   RoleBinding      ServiceAccount    Pod      ServiceAccount                    namespace  mynamespace                   ServiceAccount  example sa               namespace       ServiceAccount default       APIServer          ServiceAccount           Secret                    Role                      rules      Role       mynamespace    pod    get watch list             RoleBinding         Role   ServiceAccount               Pod       ServiceAccount   Pod                             k8s   ServiceAccount     Serects         run secrets kubernetes io serviceaccount        client          ca crt   token",
        "objectID": "posts/cloud_computing/k8s_practice/rbac-实践",
        "date": "2020-10-30T08:03:17.000Z",
        "description": "使用 RBAC 进行访问控制与授权",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "k8s",
            "云计算"
        ],
        "categories": [
            "k8s 实践"
        ]
    },
    {
        "title": "StatefulSet 实践",
        "uri": "posts/cloud_computing/k8s_practice/statefulset-实践",
        "content": "Deployment                                  Deployment                    Pod                    StatefulSet             Pod                                       Pod     1 HeadlessService StatefulSet     HeadlessService           HeadlessService         headless_service           Headless     Service       clusterIP   None     kubectl create    HeadlessService                  Endpoint      Endpoint     Node 1 Node 2   Pod         Endpoint    Service                          Headless Service            Pod   IP                 DNS           svc cluster local          Headless Service             2 StatfulSet 2 1 StaefulSet              StatefulSet          Headless Service                   StatefulSet                 StatefulSet   Deployment            serviceName           HeadlessService     StatefulSet        Deployment      Pod           StatefulSet          ReplicaSet        Deployment                  Pod        Pod                                              web 0  web 0      Ready      web 1       busybox         nslookup    HeadlessService                            web 0 Pod      StatefulSet            Pod    Pod                  web 0 nginx default svc cluster local                                               IP                Pod   IP 2 2 StatefulSet             StatefulSet    Template PVC                PVC     PodName        nfs   2   PV   2   Pod                       StatefulSet     PVC            Pod          PVC               StatefulSet   2   Pod        PVC            PVC              volume name   pod name     PVC   Pod                         Pod      Pod          Pod Name             Pod    PVC",
        "objectID": "posts/cloud_computing/k8s_practice/statefulset-实践",
        "date": "2020-10-30T01:32:39.000Z",
        "description": "使用 StatefulSet 进行副本控制",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "k8s",
            "云计算"
        ],
        "categories": [
            "k8s 实践"
        ]
    },
    {
        "title": "虚拟机 k8s 集群搭建",
        "uri": "posts/cloud_computing/k8s_practice/虚拟机-k8s-集群搭建",
        "content": "1               3           Master Node    Work Node                                         centos 7    2 GB                 copy            Node 1 Node 2 Node 3                              VirtualBox     Nat         Node     IP 10 0 2 10   10 0 2 12             ssh   DNAT                        NodeNatNetwork                       hostname       IP                                          VirtualBox   Nat         2    K8s       kubeadm      k8s   Node 1   Master             2 1    kubeadm kubelet kubectl    kubeadm kubelet kubectl               Installing kubeadm   2 2 kubeadm init     Master    Node 1      kubeadm init      Master             kubeadm     Kubernetes                         etc kubernetes                 static pod        apiserver controller manager etcd scheduler              kubeadm         bootstrap token                   token               kubeadm    swap     kubeadm       swap    swapoff  a             kubectl      8080               kubectl        kubeadm      etc kubernetes admin conf               admin conf        kube config                 2 3 kubeadm join  token            kubead init                kubeadm join   Node 1 Node 2                 root Node 2 kubeadm join 10 0 2 10 6443   token mahrou d3uodof21i3d6yxk   discovery token ca cert hash sha256 21dfe4ef6b3bbd89f803bf44ff6eda587874336d103d0e4a3b   v 5      kubelet        pod           kube proxy                     Node 1    nc ip         ping       Node 1 tcpdump         Node 3                   iptables   Node 2 Node 3 IP     kubectl                 2 4                         kubectl nodes            NotReady       kubectl describe node node 1                   Network Plugin       3                         Ready         Pod           Weave              kubectl apply  f  https   cloud weave works k8s net k8s version   kubectl version   base64   tr  d   n               Weave     BAAC                 Pod     DaemonSet                     DaemonSet              Node    Pod                 weave net     pod               4                                                 Rook                kubectl apply  f https   raw githubusercontent com rook rook master cluster exampleskubernetes ceph common yaml   kubectl apply  f https   raw githubusercontent com rook rook master cluster exampleskubernetes ceph operator yaml   kubectl apply  f https   raw githubusercontent com rook rook master cluster examples kubernetes ceph cluster yaml            rook       namespace         DaemonSet            Pod",
        "objectID": "posts/cloud_computing/k8s_practice/虚拟机-k8s-集群搭建",
        "date": "2020-10-15T12:10:35.000Z",
        "description": "单机使用虚拟机搭建 k8s 集群",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "k8s",
            "云计算"
        ],
        "categories": [
            "k8s 实践"
        ]
    },
    {
        "title": "KVM 虚拟机的存储与网络",
        "uri": "posts/cloud_computing/vm/KVM虚拟机的存储与网络",
        "content": "libvirt                                       1 virtio    KVM   IO                QEMU               KVM                   Paravirtualized Drivers  PV Drivers                   virtio             1 1     I O              I O                        Device Driver    I O       KVM                       I O     sharing page   KVM          QEMU          qemu           I O     QEMU        I O               Emulation Code    I O         I O            I O              I O               DMA      I O   QEMU                                 KVM       DMA         KVM        I O                          QEMU          DMA         QEMU    I O                                      I O            VMEntry VMExit                         1 2 virtio      virtio      Hypervisor     API                         virtio     Hypervisor                    virtio                   fronded   virtio blk virtio net                        backend    QEMU           I O     virtio                                                  Hypervisor                                             0          virtio net                  virtio ring          ring buffer                                           I O                                   I O           virtio               virtio    virtio              virtio         virtio               Linux                      virtio                  virtio   root kvm guest     lsmod   grep virtio virtio_net 28024 0 virtio_pci 22913 0 virtioring 21524 2 virtionet virtio_pci virtio 15008 2 virtionet virtiopci    virtio virtioring virtiopci        virtio API       virtio            1 3 vhost        virtio                   QEMU      QEMU                                                    vhost                vhost                                virtio                       vhost net        vhost blk               vhost    lsmod   grep vhost vhost_net 28672 1 vhost 53248 1 vhost_net vhost_iotlb 16384 1 vhost 1 4            virtio                                KVM       QEMU                    KVM            virtio     KVM                        QEMU                           virtio                                       virtio               QEMU           QEMU            care         virtio                     virtio                   virtio            QEMU                 vhost                        2        2 1 PCI        PCI                  PCI   PCI E                                            QEMU                                        Intel                Intel R Virtualization Technology Directed I O  VT d    AMD       AMD Vi     IOMMU          x86           VT d   BIOS       VT d              VT d              vfio pci       3 10              intel_iommu on intel       modprobe vfio_pci   lsmod   grep vfio vfio_pci 53248 0 vfiovirqfd 16384 1 vfiopci vfioiommutype1 32768 0 vfio 36864 2 vfioiommutype1 vfio_pci irqbypass 16384 8 vfio_pci kvm 2 2 SR IOV VT d                                         PCI_SIG       SR IOV Single Root I O Virtualizaiton Sharing                                           SR IOV                    SR IOV         function  Physical Function PF        PF        PCI e       SR IOV                  VF           function     Virtual Function VF          PF           PCI e                  function     SR IOV          VF               DMA         Hypervisor                   SR IOV             PCI            Function 1   PF      VF     VF              BAR Base Address Register         Hypervisor     VF                                VF                Intel VT x   VT d                           DMA                      Hypervisor               VF                               SR IOV          Intel VT x   VT d   AMD   SVM   IOMMU                  SR IOV       Linux        PCI     Capabilities              SR IOV       lspci  s 82 00 0  v 82 00 0 Ethernet controller  Intel Corporation I350 Gigabit Network Connection  rev 01  Flags  bus master  fast devsel  latency 0  IRQ 38  NUMA node 1 Memory d0100000  32 bit  non prefetchable   size 1M  I O ports c020  size 32  Memory d0204000  32 bit  non prefetchable   size 16K  Expansion ROM d0400000  disabled   size 1M  Capabilities   40  Power Management version 3 Capabilities   50  MSI  Enable  Count 1 1 Maskable  64bit  Capabilities   70  MSI X  Enable  Count 10 Masked  Capabilities   a0  Express Endpoint  MSI 00 Capabilities   100  Advanced Error Reporting Capabilities   140  Device Serial Number a4 dc be ff ff 17 8d 52 Capabilities   150  Alternative Routing ID Interpretation  ARI  Capabilities   160  Single Root I O Virtualization  SR IOV  Capabilities   1a0  Transaction Processing Hints Capabilities   1c0  Latency Tolerance Reporting Capabilities   1d0  Access Control Services Kernel driver use  igb Kernel modules  igb  Capabilities    160  Single Root I O Virtualization  SR IOV          SR IOV                     3                 4k              fio  thread  name   DISK   filename   DISK     ioengine libaio  direct 1  bs 4k  rw randrw  iodepth 32    size 8G  rw readrw                                               3 1                    IO       QEMU   QEMU      ",
        "objectID": "posts/cloud_computing/vm/KVM虚拟机的存储与网络",
        "date": "2020-11-28T09:29:39.000Z",
        "description": "总结 KVM 虚拟机使用存储与网络的方式",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "虚拟机",
            "KVM",
            "云计算"
        ],
        "categories": [
            "VM"
        ]
    },
    {
        "title": "制作虚拟机镜像",
        "uri": "posts/cloud_computing/vm/制作虚拟机镜像",
        "content": "libvirt         domain          domain                         virsh define   start    virt install                centos       KVM         1   ISO                                                1 1                  ISO            ISO                                              ISO     virt install                                  virt install   name guest1_fromiso   memory 2048   vcpus 2     disk size 8   location CentOS 7 x86_64 DVD 2003 iso     os type Linux   os variant centos7 0   virt type kvm     boot menu on   graphics none   console pty   extra args  console ttyS0                                location      iso       boot menu on                         console pty   extra args  console ttyS0                   graphics none           network bridge virbr0             libvirt       bridge             libvirt            dhcp                    libvirt                    disk size 8 disk                      8G   qcow2                     var lib libvirt images                                                   domain                             virsh list Id Name State 18 guest1_fromiso running 1 2                                             RedHat     kickstart                                        KICKSTART INSTALLATIONS 2    Cloud Image                                                                                                            hostname          cloud init                                                 cloud init     2 1 cloud init                             cloud init              cloud init                            hostname ssh key password     1       metadata            cloud init     userdata    cloud init                  yaml      datasource cloud init                                  NoCloud datasource    2       cloud init           Generator        systemd     generator         cloud init target target                  unit                 cloud init        generator     cloud init          etc cloud cloud init disabled                proc cmdline      cloud init disabled                   KERNEL_CMDLINE             target       unit      Local   cloud init local service             local    datasource                               metadata                      dhcp eth0       etc cloud cloud cfg            network   config  disabled              Init Config Final       service   cloud init service cloud config service  cloud final service     local                     metadata    etc cloud cloud cfg                      module       cloud init                         cloud init clean               var log cloud init log     cloud init          2 2                      cloud image               wget https   mirrors ustc edu cn centos cloud centos 7 images CentOS 7 x86_64 GenericCloud 2003 qcow2                      virt install                     virt install                                                           virt customize  a CentOS 7 x86_64 GenericCloud 2003 qcow2   root password password yourpassword         cloud init      datasource                 NoCloud         s       disk        user data   meta date        cat meta data instance id  guest1 local hostname  guest1   cat user data  cloud config chpasswd  expire  false list    root  password1 ssh_pwauth  True    disk       userdata   metadata        genisoimage  output seed iso  volid cidata  joliet  rock user data meta data             virt install   memory 2048   vcpus 2   name guest2     disk CentOS 7 x86_64 GenericCloud 2003 qcow2   disk seed iso     os type Linux   os variant centos7 0   virt type kvm     graphics none   network default     import              disk CentOS 7 x86_64 GenericCloud 2003 qcow2          import                                 disk seed iso    cloud init datasource                   cloud init                                       CentOS 7 x86_64 GenericCloud 2003 qcow2                  libvirt              etc libvirt qemu guest1 xml     CREATING GUESTS VIRT INSTALL KICKSTART INSTALLATIONS cloud init Documentation",
        "objectID": "posts/cloud_computing/vm/制作虚拟机镜像",
        "date": "2020-10-31T09:47:42.000Z",
        "description": "制作虚拟机镜像",
        "weight": 4,
        "draft": false,
        "author": "Shiori",
        "tags": [
            "虚拟机",
            "KVM",
            "云计算"
        ],
        "categories": [
            "VM"
        ]
    }
]
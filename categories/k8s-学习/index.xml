<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>k8s 学习 - 分类 - Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/categories/k8s-%E5%AD%A6%E4%B9%A0/</link>
        <description>k8s 学习 - 分类 - Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 08 Jun 2021 12:09:25 &#43;0000</lastBuildDate><atom:link href="https://KanShiori.github.io/categories/k8s-%E5%AD%A6%E4%B9%A0/" rel="self" type="application/rss+xml" /><item>
    <title>Schedule Preemption Eviction</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/schedule-preemption-eviction/</link>
    <pubDate>Tue, 08 Jun 2021 12:09:25 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/schedule-preemption-eviction/</guid>
    <description><![CDATA[1 概述 无论是基本的副本控制器，还是自定义资源，其控制的底层 Pod 的调度都是都通过 scheduer 完成的。 2 调度 2.1 nodeSelector Pod 的 spec.nodeSelector 可以用于控制 Pod 能被调度到哪些节点上。其]]></description>
</item><item>
    <title>[WIP] CRD 学习</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/crd-%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Tue, 08 Jun 2021 11:45:54 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/crd-%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[1 概述 Kubernetes 不仅仅是一个编排框架，更是提供了极大的扩展性，可以看做一个资源框架。你可以基于 k8s 提供的种种功能，来满足你应用的需要。 其中 CRD 就是允许你]]></description>
</item><item>
    <title>StatefulSet 学习</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/statefulset-%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Mon, 07 Jun 2021 11:55:46 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/statefulset-%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[1 StatefulSet 概述 Pod 在设计的理念上是无状态的，因为 Pod 可以被认为任意时刻被销毁，或者任意时刻可以被在别的节点创建。 Deployment 与 RelicSets 就是基于这个理念设计的，它们仅仅]]></description>
</item><item>
    <title>Service 学习</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/service-%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Sun, 06 Jun 2021 14:03:01 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/service-%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[1 概述 首先我们需要明确 Service 出现的背景：因为 Pod 设计上是无状态的，可以说没有固定的 IP，所以在其他组件访问某一个网络服务时，需要一个 “固定” 的地址]]></description>
</item><item>
    <title>PV PVC StorageClass 学习</title>
    <link>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/pv-pvc-storageclass-%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Sat, 05 Jun 2021 07:43:09 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud_computing/k8s_learning/pv-pvc-storageclass-%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[1 概念 1.1 PV <strong><ruby>PV<rt>Persistent Volume</rt></ruby></strong> 代表一个实际可用的后端存储（也可能不是后端，而是 Local PV）。大多数情况下，PV 是一个网络文件系统，或者分布式存储，或者云厂商的云]]></description>
</item></channel>
</rss>

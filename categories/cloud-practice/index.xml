<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Cloud Practice - 分类 - Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/categories/cloud-practice/</link>
        <description>Cloud Practice - 分类 - Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 31 Jan 2023 19:07:30 &#43;0800</lastBuildDate><atom:link href="https://KanShiori.github.io/categories/cloud-practice/" rel="self" type="application/rss+xml" /><item>
    <title>OpenKruise</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/openkruise/</link>
    <pubDate>Tue, 31 Jan 2023 19:07:30 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/openkruise/</guid>
    <description><![CDATA[1 概述 OpenKruise 通过自定义一些 CRD 来提供一些原生 Resource 不含有的功能。 其基本架构如下： Manager kruise-manager 是各个 CRD 的 Controller 和 Webhook，通过 Deployment 部署。 每个 CRD Controller 逻辑上都是独立的]]></description>
</item>
<item>
    <title>跨云访问资源</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/access-resources-across-clouds/</link>
    <pubDate>Tue, 25 Oct 2022 13:54:10 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/access-resources-across-clouds/</guid>
    <description><![CDATA[跨云访问指的是：在一个云厂商的环境中，访问另一个云厂商的服务。最简单的方式就是将静态密钥（AWS AK/SK 与 GCP ServiceAccount Key）注入到应用中，但是显而易见这]]></description>
</item>
<item>
    <title>使用 KubeBuilder 编写 Controller</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/kubebuilder/</link>
    <pubDate>Mon, 08 Aug 2022 21:16:40 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/kubebuilder/</guid>
    <description><![CDATA[1 基本框架 执行 kubebuilder init 命令后，KubeBuilder 就会创建 Controller 的基本框架。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35]]></description>
</item>
<item>
    <title>Kustomize</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/kustomize/</link>
    <pubDate>Mon, 23 May 2022 21:30:43 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/kustomize/</guid>
    <description><![CDATA[1 概述 Kustomize 基于 kustomization.yaml 文件来生成一系列的 Kubernetes 资源的 YAML 文件。 基于这种模式，Kustomize 能够支持的功能大致分为三类： 生成 Resource - 基于一些来源数据，生成出]]></description>
</item>
<item>
    <title>Crossplane 入门</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/use-crossplane/</link>
    <pubDate>Thu, 14 Apr 2022 20:29:51 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/use-crossplane/</guid>
    <description><![CDATA[与 Pulumi 一样，Crossplane 也是一个 Iac 的平台。Crossplane 与 Kubernetes 的集成度更高，允许用户通过创建 Kubernetes 资源来创建云资源。 1 基本概念 Crossplane 的一个]]></description>
</item>
<item>
    <title>Pulumi 入门</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/use-pulumi/</link>
    <pubDate>Wed, 06 Apr 2022 21:58:22 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/use-pulumi/</guid>
    <description><![CDATA[内容基本照搬的官方文档：Architecture &amp; Concepts。 Pulumi 是一个支持 IaC 的平台。与其他 IaC 工具最大的不同时，Pulumi 允许使用熟悉]]></description>
</item>
<item>
    <title>Kubernetes 中调试 Pod</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/debug-pod/</link>
    <pubDate>Tue, 29 Mar 2022 14:07:03 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/debug-pod/</guid>
    <description><![CDATA[1 Ephemeral Container 可以使用 kubectl debug 来给一个运行中的 Pod 添加一个 Ephemeral Container 运行，并且不需要重启 Pod。 版本要求 Ephemeral Container 需要 Kubernetes 1.23 版本以上，目前还是处于 beta 状态。 1 kubectl debug -it ${pod_name} --image=busybox --target=${container_name}]]></description>
</item>
<item>
    <title>Kubernetes 使用 ExternalDNS 同步 DNS</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/use-external-dns/</link>
    <pubDate>Wed, 22 Dec 2021 22:03:24 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/use-external-dns/</guid>
    <description><![CDATA[1 概述 ExternalDNS 用于将 Kubernetes 集群中的 Service/Ingress 暴露的服务同步给外部的 DNS 服务商，例如 AWS Route53、GCP CloudDNS 等。 ExternalDNS 本身并不是一个 DNS Nameserver，而是负责]]></description>
</item>
<item>
    <title>Kubernetes 跨集群网络联通</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/across-kubernetes/</link>
    <pubDate>Thu, 30 Sep 2021 07:25:32 &#43;0000</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/across-kubernetes/</guid>
    <description><![CDATA[Kubernetes 实践 主要记录一些自己的一些部署实践。 1 目标 最近在看 TiDB 的 Multi Kubernetes 集群部署方案，TiDB 本身是灵活扩容的分布式数据库，因此部署前需要确保 Multi Kubernetes 之间服]]></description>
</item>
<item>
    <title>Kubernetes 集群搭建</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/create-cluster/</link>
    <pubDate>Thu, 15 Oct 2020 20:10:35 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/create-cluster/</guid>
    <description><![CDATA[Kubernetes 实践 主要记录一些自己的一些部署实践。 1 虚拟机集群搭建 目标：创建 3 个虚拟机，用作一个 Master Node，两个 Work Node；当然，三个节点处于同一个网段]]></description>
</item>
</channel>
</rss>

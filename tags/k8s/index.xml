<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>k8s - 标签 - Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/tags/k8s/</link>
        <description>k8s - 标签 - Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 14 Mar 2023 10:57:15 &#43;0800</lastBuildDate><atom:link href="https://KanShiori.github.io/tags/k8s/" rel="self" type="application/rss+xml" /><item>
    <title>Kubernetes - CEL 语法</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/cel-in-k8s/</link>
    <pubDate>Tue, 14 Mar 2023 10:57:15 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/cel-in-k8s/</guid>
    <description><![CDATA[1 概述 Kubernetes 中 Validate 规则都是通过 Common Expression Language 来表达的。 CEL 表达式通常是一行简短的代码，能够内联到 Kubernetes 资源的属性中。不同的资源可能有着不同的输入，因此当你使用 CEL]]></description>
</item>
<item>
    <title>K8s 编程 - Operator Design Notes</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/operator-design-note/</link>
    <pubDate>Mon, 06 Feb 2023 20:09:34 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/operator-design-note/</guid>
    <description><![CDATA[下面简单介绍了各个 Operator 项目的设计框架与思路，作为参考。 Cockroach Operator Cockroach Operator 基于 Controller Runtime 实现的，因此逻辑的入口是 Reconcile() 函数。 大体的逻辑如下： 1 2 3 4 5 6 7 8 9 10 11 12]]></description>
</item>
<item>
    <title>K8s 编程 - Operator Programming Notes</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/operator-programming-note/</link>
    <pubDate>Sun, 05 Feb 2023 20:09:34 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/operator-programming-note/</guid>
    <description><![CDATA[下面是作为 Operator 初学者自己总结的一些经验，纯属个人随意总结，没有任何正确性可言。 使用 Status 传递过程式操作状态 过程式操作指的是 Upgrade Scale 这样的操作，也就是触]]></description>
</item>
<item>
    <title>OpenKruise</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/openkruise/</link>
    <pubDate>Tue, 31 Jan 2023 19:07:30 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/openkruise/</guid>
    <description><![CDATA[1 概述 OpenKruise 通过自定义一些 CRD 来提供一些原生 Resource 不含有的功能。 其基本架构如下： Manager kruise-manager 是各个 CRD 的 Controller 和 Webhook，通过 Deployment 部署。 每个 CRD Controller 逻辑上都是独立的]]></description>
</item>
<item>
    <title>K8s 实现 - Informer 实现</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/informer-implement/</link>
    <pubDate>Mon, 26 Dec 2022 18:57:22 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/informer-implement/</guid>
    <description><![CDATA[1 基本架构 Kubernetes Client-go 库基于 ETCD 的实现了 Push + Pull 的基本模型，其实现的架构如下： 图中上半部分是 Client-go 的实现，包括核心组件： Reflector - Watch 与 List Resource，当 Resource 出现]]></description>
</item>
<item>
    <title>K8s 实现 - Scheduler 实现</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/scheduler-implement/</link>
    <pubDate>Mon, 19 Sep 2022 15:21:22 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_programming/scheduler-implement/</guid>
    <description><![CDATA[1 概述 Kubernetes Scheduler 负责了 Schedule + Eviction + Preemption 三个功能。Scheduler 本质上也是一个 Controller，监听着 Pod 和 Node 等资源，出现事件时尝试执行调度操作。 目]]></description>
</item>
<item>
    <title>Kubernetes - 网络设计</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/container-network/</link>
    <pubDate>Wed, 31 Aug 2022 20:22:14 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/container-network/</guid>
    <description><![CDATA[1 网络模型 Kubernetes 集群中的网络是虚拟扁平的大网络，Service 与 Pod 的网络有着各自独立的一个网段，每个 Service 与 Pod 占用网段中的一个 IP。Pod 之间可以通]]></description>
</item>
<item>
    <title>使用 KubeBuilder 编写 Controller</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/kubebuilder/</link>
    <pubDate>Mon, 08 Aug 2022 21:16:40 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/kubebuilder/</guid>
    <description><![CDATA[1 基本框架 执行 kubebuilder init 命令后，KubeBuilder 就会创建 Controller 的基本框架。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35]]></description>
</item>
<item>
    <title>Kubernetes - 证书相关</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/certificate/</link>
    <pubDate>Mon, 13 Jun 2022 21:01:06 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/certificate/</guid>
    <description><![CDATA[1 Kubernetes 中的证书 Kubernetes 所有组件之间的通信都基于 TLS 进行加密，并且都基于 mTLS 进行双向认证。因此，每个组件作为调用者需要配置：client cert + client key + server ca ce]]></description>
</item>
<item>
    <title>Kustomize</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/kustomize/</link>
    <pubDate>Mon, 23 May 2022 21:30:43 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/kustomize/</guid>
    <description><![CDATA[1 概述 Kustomize 基于 kustomization.yaml 文件来生成一系列的 Kubernetes 资源的 YAML 文件。 基于这种模式，Kustomize 能够支持的功能大致分为三类： 生成 Resource - 基于一些来源数据，生成出]]></description>
</item>
</channel>
</rss>

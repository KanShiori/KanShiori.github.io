<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>k8s - 标签 - Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/tags/k8s/</link>
        <description>k8s - 标签 - Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 31 Aug 2022 20:22:14 &#43;0800</lastBuildDate><atom:link href="https://KanShiori.github.io/tags/k8s/" rel="self" type="application/rss+xml" /><item>
    <title>Kubernetes - 网络设计</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/container-network/</link>
    <pubDate>Wed, 31 Aug 2022 20:22:14 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/container-network/</guid>
    <description><![CDATA[1 网络模型 Kubernetes 集群中的网络是虚拟扁平的大网络，Service 与 Pod 的网络有着各自独立的一个网段，每个 Service 与 Pod 占用网段中的一个 IP。Pod 之间可以通]]></description>
</item>
<item>
    <title>使用 KubeBuilder 编写 Controller</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/kubebuilder/</link>
    <pubDate>Mon, 08 Aug 2022 21:16:40 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/kubebuilder/</guid>
    <description><![CDATA[1 基本框架 执行 kubebuilder init 命令后，KubeBuilder 就会创建 Controller 的基本框架。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35]]></description>
</item>
<item>
    <title>Kubernetes - 证书相关</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/certificate/</link>
    <pubDate>Mon, 13 Jun 2022 21:01:06 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/certificate/</guid>
    <description><![CDATA[1 Kubernetes 中的证书 Kubernetes 所有组件之间的通信都基于 TLS 进行加密，并且都基于 mTLS 进行双向认证。因此，每个组件作为调用者需要配置：client cert + client key + server ca ce]]></description>
</item>
<item>
    <title>Kustomize</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/kustomize/</link>
    <pubDate>Mon, 23 May 2022 21:30:43 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/kustomize/</guid>
    <description><![CDATA[1 概述 Kustomize 基于 kustomization.yaml 文件来生成一系列的 Kubernetes 资源的 YAML 文件。 基于这种模式，Kustomize 能够支持的功能大致分为三类： 生成 Resource - 基于一些来源数据，生成出]]></description>
</item>
<item>
    <title>Kubernetes - Update 与 Rollback</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/rolling-upgrade/</link>
    <pubDate>Wed, 11 May 2022 21:24:25 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/rolling-upgrade/</guid>
    <description><![CDATA[1 操作 1.1 Update 当用户修改 Deployment DaemonSet StatefulSet 定义中的 .spec.template 任意字段时，就会触发 Pod 的升级，默认都是 Rolling Update。 1 $ kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1 通过 kubectl rollout status 查看滚动升级的过程： 1 2 3]]></description>
</item>
<item>
    <title>Kubernetes - 理解 kubeconfig</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/kubeconfig/</link>
    <pubDate>Wed, 27 Apr 2022 17:02:24 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/kubeconfig/</guid>
    <description><![CDATA[1 基本概念 kubeconfig 文件是 kubectl 用以查找访问集群的配置。 kubeconfig 文件的结构如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 apiVersion:v1kind:Configcurrent-context:federal-contextclusters:- cluster:certificate-authority:path/to/my/cafileserver:https://horse.org:4443name:horse-cluster- cluster:insecure-skip-tls-verify:trueserver:https://pig.org:443name:pig-clustercontexts:- context:cluster:horse-clusternamespace:chisel-nsuser:green-username:federal-context- context:cluster:pig-clusternamespace:saw-nsuser:black-username:queen-anne-contextpreferences:colors:trueusers:- name:blue-useruser:token:blue-token-]]></description>
</item>
<item>
    <title>Kubernetes 中调试 Pod</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/debug-pod/</link>
    <pubDate>Tue, 29 Mar 2022 14:07:03 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/debug-pod/</guid>
    <description><![CDATA[1 Ephemeral Container 可以使用 kubectl debug 来给一个运行中的 Pod 添加一个 Ephemeral Container 运行，并且不需要重启 Pod。 版本要求 Ephemeral Container 需要 Kubernetes 1.23 版本以上，目前还是处于 beta 状态。 1 kubectl debug -it ${pod_name} --image=busybox --target=${container_name}]]></description>
</item>
<item>
    <title>Kubernetes - 认证与鉴权机制</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/authentication-and-authorization/</link>
    <pubDate>Thu, 24 Mar 2022 20:05:42 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/authentication-and-authorization/</guid>
    <description><![CDATA[1 概述 如下图所示，APIServer 在接受到一个 API 请求时，第一阶段就是对请求进行 <strong><ruby>认证<rt>Authentication</rt></ruby></strong> 与 [鉴权]^(Au]]></description>
</item>
<item>
    <title>Kubernetes - CNI 概念与实现</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/cni/</link>
    <pubDate>Tue, 25 Jan 2022 22:11:28 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/cni/</guid>
    <description><![CDATA[1 基本概念 CNI Plugin 负责了 Kubernetes 基础网络的构建。为此，CNI Plugin 需要实现： 构建 Node 网络 构建 Pod 网络 CNI 全称 Container Network Interface，描述了网络插件的标准 API。]]></description>
</item>
<item>
    <title>Kubernetes - 资源更新机制与 CLI 实现</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/update-resource-mechanism/</link>
    <pubDate>Thu, 13 Jan 2022 11:22:02 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/update-resource-mechanism/</guid>
    <description><![CDATA[1 Update 机制 Update 机制 指的是通过 HTTP Put 方法 上传完整的资源对象，而 Kubernetes 使用完整的资源对象更新原来的资源对象。在更新对象时，Kubernetes 通过 resourceVersion 来检查]]></description>
</item>
</channel>
</rss>

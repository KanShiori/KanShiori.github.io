<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>aws - 标签 - Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/tags/aws/</link>
        <description>aws - 标签 - Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 25 Oct 2022 13:54:10 &#43;0800</lastBuildDate><atom:link href="https://KanShiori.github.io/tags/aws/" rel="self" type="application/rss+xml" /><item>
    <title>跨云访问资源</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/access-resources-across-clouds/</link>
    <pubDate>Tue, 25 Oct 2022 13:54:10 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/access-resources-across-clouds/</guid>
    <description><![CDATA[跨云访问指的是：在一个云厂商的环境中，访问另一个云厂商的服务。最简单的方式就是将静态密钥（AWS AK/SK 与 GCP ServiceAccount Key）注入到应用中，但是显而易见这]]></description>
</item>
<item>
    <title>AWS - Private Link</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/private-link/</link>
    <pubDate>Mon, 11 Jul 2022 20:03:39 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/private-link/</guid>
    <description><![CDATA[1 概述 在 AWS - VPC 与 Service 通信 中，描述了 VPC 与 Service 通信的几种方式： VPC Peering - 连接两个不同网段的 VPC Transit Gateway - 连接多个不同网段的 VPC Private Link - 通过 Endpoint 来作为 Service 的代理 每种方式]]></description>
</item>
<item>
    <title>AWS - EBS</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/ebs/</link>
    <pubDate>Wed, 25 May 2022 21:43:54 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/ebs/</guid>
    <description><![CDATA[1 概述 AWS Elastic Block Store（简称 EBS） 是 AWS 中的主要存储服务，EBS Volume 可以附加到某个 EC2 Instance 上，在 Instance 上看就是一个未经过格式化的块设备，与其他物理硬盘]]></description>
</item>
<item>
    <title>AWS - KMS</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/kms/</link>
    <pubDate>Thu, 05 May 2022 21:21:14 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/kms/</guid>
    <description><![CDATA[1 概述 Key Management Service（简称 KMS）是用于管理密钥的服务：KMS 保管密钥，用户请求 KMS 以加密或解密数据。大多数的 AWS 服务都支持直接使用 KMS，]]></description>
</item>
<item>
    <title>AWS - EKS</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/eks/</link>
    <pubDate>Mon, 02 May 2022 22:01:07 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/eks/</guid>
    <description><![CDATA[1 集群管理 EKS 集群包含两个层面： EKS Control Plane 控制面包含 Kubernetes 的核心组件，例如 ETCD 和 APIServer。控制面完全是由 AWS 托管的，也就是说用户不需要维护控制面]]></description>
</item>
<item>
    <title>AWS - S3</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/s3/</link>
    <pubDate>Mon, 06 Dec 2021 21:07:09 &#43;0800</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/s3/</guid>
    <description><![CDATA[1 Storage Type 为了不同的存储场景，S3 提供了多种类型的存储类型。 存储类型 使用场景 S3 Standard 经常访问的数据 S3 Intelligent-Tiering 动态自动优化访问模式 S3 Standard-IA 不经常访问数据，会跨多]]></description>
</item>
<item>
    <title>AWS - ELB</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/elb/</link>
    <pubDate>Sat, 04 Dec 2021 13:13:45 &#43;0000</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/elb/</guid>
    <description><![CDATA[1 LB 的基本模型 不同的 LB 在使用上是基本相同的，都依据以下的模型： Domain - LB 拥有着一个唯一的域名，Client 通过该域名来访问 LB。 LB 的域名是单点的]]></description>
</item>
<item>
    <title>AWS - IAM</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/iam/</link>
    <pubDate>Wed, 01 Dec 2021 13:47:56 &#43;0000</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/iam/</guid>
    <description><![CDATA[使用 AWS 时，不同的员工或者应用程序有着不同的 AWS 资源需求，通过 IAM 对其访问权限进行控制。 IAM 本质上是为了完成两个功能： Authentication - 身份认证，操作资源前确认请]]></description>
</item>
<item>
    <title>AWS - VPC 与 Service 通信</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/vpc-and-aws/</link>
    <pubDate>Mon, 29 Nov 2021 13:15:05 &#43;0000</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/vpc-and-aws/</guid>
    <description><![CDATA[1 VPC Peering VPC Peering 用于连接两个不同地址范围的 VPC，VPC 可以处于不同的 Region，甚至不同的 AWS 账户。 当 VPC Peering 连接两个 VPC 后，VPC 内部的资源（Ins]]></description>
</item>
<item>
    <title>AWS - VPC 与 Internet 通信</title>
    <link>https://KanShiori.github.io/posts/cloud/aws_learning/vpc-and-internet/</link>
    <pubDate>Mon, 29 Nov 2021 13:12:48 &#43;0000</pubDate>
    <author>Shiori</author>
    <guid>https://KanShiori.github.io/posts/cloud/aws_learning/vpc-and-internet/</guid>
    <description><![CDATA[1 Internet Gateway Internet Gateway 用于将 VPC 的流量转发给外网，并将外网的主动访问转发给指定的 Instance。 使用 Internet Gateway 的必要操作： 创建 Internet Gateway 并关联到 VPC 上。 Instance 拥有公网 IP 地]]></description>
</item>
</channel>
</rss>

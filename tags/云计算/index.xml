<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>云计算 - 标签 - Shiori&#39;s Blog</title>
        <link>https://KanShiori.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/</link>
        <description>云计算 - 标签 - Shiori&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 14 Apr 2022 20:29:51 &#43;0800</lastBuildDate><atom:link href="https://KanShiori.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/" rel="self" type="application/rss+xml" /><item>
    <title>Crossplane 入门</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/use-crossplane/</link>
    <pubDate>Thu, 14 Apr 2022 20:29:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/use-crossplane/</guid>
    <description><![CDATA[与 Pulumi 一样，Crossplane 也是一个 Iac 的平台。Crossplane 与 Kubernetes 的集成度更高，允许用户通过创建 Kubernetes 资源来创建云资源。 1 基本概念 Crossplane 的一个]]></description>
</item><item>
    <title>Pulumi 入门</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/use-pulumi/</link>
    <pubDate>Wed, 06 Apr 2022 21:58:22 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/use-pulumi/</guid>
    <description><![CDATA[内容基本照搬的官方文档：Architecture &amp; Concepts。 Pulumi 是一个支持 IaC 的平台。与其他 IaC 工具最大的不同时，Pulumi 允许使用熟悉]]></description>
</item><item>
    <title>Kubernetes 中调试 Pod</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/debug-pod/</link>
    <pubDate>Tue, 29 Mar 2022 14:07:03 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/debug-pod/</guid>
    <description><![CDATA[1 Ephemeral Container 可以使用 kubectl debug 来给一个运行中的 Pod 添加一个 Ephemeral Container 运行，并且不需要重启 Pod。 版本要求 Ephemeral Container 需要 Kubernetes 1.23 版本以上，目前还是处于 beta 状态。 1 kubectl debug -it ${pod_name} --image=busybox --target=${container_name}]]></description>
</item><item>
    <title>Kubernetes 认证与鉴权机制</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/authentication-and-authorization/</link>
    <pubDate>Thu, 24 Mar 2022 20:05:42 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/authentication-and-authorization/</guid>
    <description><![CDATA[1 概述 如下图所示，APIServer 在接受到一个 API 请求时，第一阶段就是对请求进行 <strong><ruby>认证<rt>Authentication</rt></ruby></strong> 与 [鉴权]^(Au]]></description>
</item><item>
    <title>Kubernetes CNI 概念与实现</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/cni/</link>
    <pubDate>Tue, 25 Jan 2022 22:11:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/cni/</guid>
    <description><![CDATA[1 CNI 基本概念 CNI 全称 Container Network Interface，是 Kubernetes 中的网络接口。Kubectl 会依据 CNI 标准的 API 来调用不同的网络插件接口。 CNI 插件实际上是一个主机上]]></description>
</item><item>
    <title>Kubernetes 资源更新机制与 CLI 实现</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/update-resource-mechanism/</link>
    <pubDate>Thu, 13 Jan 2022 11:22:02 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/update-resource-mechanism/</guid>
    <description><![CDATA[1 Update 机制 Update 机制 指的是通过 HTTP Put 方法 上传完整的资源对象，而 Kubernetes 使用完整的资源对象更新原来的资源对象。在更新对象时，Kubernetes 通过 resourceVersion 来检查]]></description>
</item><item>
    <title>Kubernetes 使用 ExternalDNS 同步 DNS</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_practice/use-external-dns/</link>
    <pubDate>Wed, 22 Dec 2021 22:03:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_practice/use-external-dns/</guid>
    <description><![CDATA[1 概述 ExternalDNS 用于将 Kubernetes 集群中的 Service/Ingress 暴露的服务同步给外部的 DNS 服务商，例如 AWS Route53、GCP CloudDNS 等。 ExternalDNS 本身并不是一个 DNS Nameserver，而是负责]]></description>
</item><item>
    <title>Kubernetes HPA 与 VPA</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/hpa-and-vpa/</link>
    <pubDate>Mon, 20 Dec 2021 19:16:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/hpa-and-vpa/</guid>
    <description><![CDATA[HPA 的核心原理就是就是从 Metric Server 采集指标数据，然后根据缩扩容算法进行计算，得到目标的 Pod 副本数量。当目标 Pod 副本数量与当前副本数量不同时，HPA Controller 调用]]></description>
</item><item>
    <title>Kubernetes CSI 概念与实现</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/csi/</link>
    <pubDate>Sat, 20 Nov 2021 08:22:28 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/csi/</guid>
    <description><![CDATA[1 设计原理 在 源码阅读 - Volume 实现 中看到，所有的存储插件实现的都是操作 Volume 的方法： Provision Volume Attach Volume Mount Device Setup Volume CSI 整体体系的架构如下图 Sidecar 容器 是一组 Kubernetes 社区维护的标准]]></description>
</item><item>
    <title>Kubernetes Volume 实现</title>
    <link>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/volume-implementation/</link>
    <pubDate>Thu, 11 Nov 2021 14:35:42 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://KanShiori.github.io/posts/cloud/cloud_native/kubernetes/k8s_learning/volume-implementation/</guid>
    <description><![CDATA[1 概述 以一个云存储作为 Volume 为例，其架构图如下： Deploy PVC - 用户 Deploy PVC 对象。 Provision Volume - PV Controller 基于 StorageClass 创建一个 Volume（无法绑定已有 PV 的情况下），并创建 PV 对象]]></description>
</item></channel>
</rss>
